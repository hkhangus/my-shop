// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookOrders(t *testing.T) {
	t.Parallel()

	query := BookOrders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookOrders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookOrderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookOrderExists(ctx, tx, o.BookID, o.OrderID)
	if err != nil {
		t.Errorf("Unable to check if BookOrder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookOrderExists to return true, but got false.")
	}
}

func testBookOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookOrderFound, err := FindBookOrder(ctx, tx, o.BookID, o.OrderID)
	if err != nil {
		t.Error(err)
	}

	if bookOrderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookOrders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookOrders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookOrderOne := &BookOrder{}
	bookOrderTwo := &BookOrder{}
	if err = randomize.Struct(seed, bookOrderOne, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, bookOrderTwo, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookOrderOne := &BookOrder{}
	bookOrderTwo := &BookOrder{}
	if err = randomize.Struct(seed, bookOrderOne, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}
	if err = randomize.Struct(seed, bookOrderTwo, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookOrderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookOrderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookOrderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func bookOrderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookOrder) error {
	*o = BookOrder{}
	return nil
}

func testBookOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookOrder{}
	o := &BookOrder{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookOrderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookOrder object: %s", err)
	}

	AddBookOrderHook(boil.BeforeInsertHook, bookOrderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookOrderBeforeInsertHooks = []BookOrderHook{}

	AddBookOrderHook(boil.AfterInsertHook, bookOrderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookOrderAfterInsertHooks = []BookOrderHook{}

	AddBookOrderHook(boil.AfterSelectHook, bookOrderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookOrderAfterSelectHooks = []BookOrderHook{}

	AddBookOrderHook(boil.BeforeUpdateHook, bookOrderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookOrderBeforeUpdateHooks = []BookOrderHook{}

	AddBookOrderHook(boil.AfterUpdateHook, bookOrderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookOrderAfterUpdateHooks = []BookOrderHook{}

	AddBookOrderHook(boil.BeforeDeleteHook, bookOrderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookOrderBeforeDeleteHooks = []BookOrderHook{}

	AddBookOrderHook(boil.AfterDeleteHook, bookOrderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookOrderAfterDeleteHooks = []BookOrderHook{}

	AddBookOrderHook(boil.BeforeUpsertHook, bookOrderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookOrderBeforeUpsertHooks = []BookOrderHook{}

	AddBookOrderHook(boil.AfterUpsertHook, bookOrderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookOrderAfterUpsertHooks = []BookOrderHook{}
}

func testBookOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookOrderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookOrderToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookOrder
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBookHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Book) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookOrderSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*BookOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookOrderToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookOrder
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookOrderDBTypes, false, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookOrderSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*BookOrder)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookOrderToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookOrder
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookOrderDBTypes, false, strmangle.SetComplement(bookOrderPrimaryKeyColumns, bookOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		if exists, err := BookOrderExists(ctx, tx, a.BookID, a.OrderID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testBookOrderToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookOrder
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookOrderDBTypes, false, strmangle.SetComplement(bookOrderPrimaryKeyColumns, bookOrderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		if exists, err := BookOrderExists(ctx, tx, a.BookID, a.OrderID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testBookOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookOrderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookOrders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookOrderDBTypes = map[string]string{`BookID`: `bigint`, `OrderID`: `bigint`, `Quantity`: `integer`}
	_                = bytes.MinRead
)

func testBookOrdersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookOrderAllColumns) == len(bookOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookOrderAllColumns) == len(bookOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookOrder{}
	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookOrderDBTypes, true, bookOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookOrderAllColumns, bookOrderPrimaryKeyColumns) {
		fields = bookOrderAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookOrderAllColumns,
			bookOrderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookOrderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookOrdersUpsert(t *testing.T) {
	t.Parallel()

	if len(bookOrderAllColumns) == len(bookOrderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookOrder{}
	if err = randomize.Struct(seed, &o, bookOrderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookOrder: %s", err)
	}

	count, err := BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookOrderDBTypes, false, bookOrderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookOrder struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookOrder: %s", err)
	}

	count, err = BookOrders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
